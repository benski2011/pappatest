// Benjamin Skinstad 470918

#include <fstream>                     //  ifstream, ofstream
#include <iostream>                    //  cout
using namespace std;

const int  ANTARR = 11;           //  Antall arrangement (1-10 stk).
const int  ANTKUNDER = 201;           //  Antall kunder (1-200 stk).
const int  NVNLEN = 20;           //  Kundenavns lengde.
const int  ARRLEN = 35;           //  Arrangementnavns lengde.

enum Oppdater { Bestilt, Faatt, Kopier };


//  DEKLARASJON AV FUNKSJONER:
void lesBilletterFraFil();
void lesKunderFraFil();
void fordelBilletter();
int hentPris(int i);

//  KLASSER:
class Kunde  {
private:
	char navn[NVNLEN];                 //  Kundens navn.
	int  antBestilt[ANTARR];           //  Antall bestilte pr. arrangement.
	int  antFaatt[ANTARR];             //  Antall f†tt pr. arrangement.

public:
	Kunde();
	void oppdaterBestiltFaatt(int nr, Oppdater oppdat, int ant = 0);
	int  antOnsket(int nr);
	//  Ekstra funksjon for † se hva som skjer ved trekkingen:
	void skriv()  {
		int i;
		cout << '\n' << navn << "\n\t";
		for (i = 1; i < ANTARR; i++)
			cout << antBestilt[i] << " ";
		cout << "\n\t";
		for (i = 1; i < ANTARR; i++)
			cout << antFaatt[i] << " ";
	}
	void skrivTilFil();
};


class Arrangement  {
private:
	char tittel[ARRLEN];               //  Arrangementets tittel/navn.
	int  pris;                         //  Pris pr. billett.
	int  antPlasser;                   //  Antall plasser/billetter totalt.
	int  antSolgt;                     //  Antall billetter solgt hittil.
	int  totaltBilletterBestilt;       //  Totalt ›nsket antall billetter.
	int  totaltKunderBestilt;          //  Antall kunder som ›nsker billetter.

public:
	Arrangement();
	void oppdater(char titt[], int ant, int pri);
	void oppdaterAntallOnskedeBilletter(int antBill);
	void oppdaterAntallSolgte(int ant);
	bool maaTrekke();
	int  antIgjen();
	int  antBestilt();
	//  Ekstra funksjon for † se hva som skjer ved trekkingen:
	void skriv()  {
		cout << '\n' << pris << "\t"
			<< antPlasser << "\t"
			<< antSolgt << "\t"
			<< totaltBilletterBestilt
			<< "\t" << totaltKunderBestilt
			<< '\t' << tittel;
	}
	int hentPris();
};

//  GLOBALE VARIABLE:
Kunde        kunder[ANTKUNDER];        //  Alle kundene.
Arrangement  arrangementer[ANTARR];    //  Alle arrangementene.
int          antKunder;                //  Antall kunder som har bestilt.


//  HOVEDPROGRAM:
int main()  {
	int valg;
	cout << "\n\n\tLeser data fra filene "
		<< "'BIL_OLXX.RES' og 'KUN_OLXX.RES' .....\n\n";
	lesBilletterFraFil();
	lesKunderFraFil();
	fordelBilletter();
	std::cout << "Hvilken kunde vil du skrive faktura for? 1-10\n";
	std::cin >> valg;
	kunder[valg].skrivTilFil();

	return 0;
}

//  DEFINISJON AV KLASSE-FUNKSJONER:
Kunde::Kunde()                         //  Nullstiller arrayers innhold.
{
}


void Kunde::oppdaterBestiltFaatt(int nr, Oppdater oppdat, int ant)
{
	if (oppdat == Bestilt)  antBestilt[nr] = ant;
	else if (oppdat == Faatt)    antFaatt[nr] = ant;
	else                         antFaatt[nr] = antBestilt[nr];
}

//  Returnerer med antall billetter kunden ›nsker p† arrangement nr."nr":
int Kunde::antOnsket(int nr)
{
	return  antBestilt[nr];
}

Arrangement::Arrangement()		//  Nullstiller medlemmene:
{
	pris = antPlasser = antSolgt =
		totaltBilletterBestilt = totaltKunderBestilt = 0;
}

//  Oppdaterer en del av medlemmene:
void Arrangement::oppdater(char titt[], int ant, int pri)
{
	strcpy_s(tittel, titt);   antPlasser = ant;   pris = pri;
}

// Oppdaterer hvor mange billetter som er bestilt:
void Arrangement::oppdaterAntallOnskedeBilletter(int antBill)
{
	++totaltKunderBestilt;    totaltBilletterBestilt += antBill;
}

//  Oppdaterer antall solgte billetter:
void Arrangement::oppdaterAntallSolgte(int ant)
{
	antSolgt += ant;
}

//  Returnerer "true" dersom ikke alle kundene kan f† sine billett›nsker:
bool Arrangement::maaTrekke()
{
	return (antPlasser < totaltBilletterBestilt);
}

//  Returnerer antall ikke solgte:
int Arrangement::antIgjen()
{
	return  (antPlasser - antSolgt);
}

//  Returnerer antall kunder bestilt:
int Arrangement::antBestilt()
{
	return  totaltKunderBestilt;
}

int Arrangement::hentPris()
{
	int temp;
	temp = pris;
	return temp;
}

//skriver ut informasjon om kunden til ASCII fil
void Kunde::skrivTilFil()
{
	ofstream utfil("kunde.dta");
	int pris, totalPris;
	totalPris = 0;	//totalpris for personen
	pris = 0;		//variabel til utregning
	utfil << "Navn på kunde:\t" << navn << '\n';
	for (int i = 1; i < ANTARR; i++)	//printer alle bestillinger
	{
		utfil << "Antall bestillinger per arrangemnet, arrnummer "
			<< i << ": " << antBestilt[i] << '\n';
	}
	for (int i = 1; i < ANTARR; i++)	//printer alle motatte biletter
	{
		if (antFaatt[i] != 0)				//hvis motatt, printer ut mengde mottatt
		{
			utfil << "Antall biletter motatt per arrangemnet, arrnummer "
				<< i << ": " << antFaatt[i] << '\n';
		}
	}
	for (int i = 1; i < ANTARR; i++)	//regner ut totalpris
	{
		if (antFaatt[i] != 0)
		{
			pris = hentPris(i);
			totalPris += (pris*antFaatt[i]);

		}
	}
	utfil << "Totalpris for arrangementet: " << totalPris;
}


//  DEFINISJONER AV FUNKSJONER:
void fordelBilletter() {
	int  i, j, k;                         //  L›kke-/tellevariable
	int  antOnsket, antIgjen;             //  Antall billetter som en kunde har
	//   ›nsket, og antall som er igjen.
	int  relNr, absNr;                    //  Relativt og absolutt kundenummer.

	srand(0);

	for (i = 1; i < ANTARR; i++)        //  G†r gjennom ALLE arrangementene:
		//  Dersom ikke alle kan f† (m† trekke)
		if (arrangementer[i].maaTrekke()) {
			//  S†lenge flere billetter † dele ut:
			while ((antIgjen = arrangementer[i].antIgjen()) > 0) {
				//  Trekker kundens relative nummer:
				relNr = (rand() % arrangementer[i].antBestilt()) + 1;

				//  M† lete etter denne kunden:
				absNr = 0;	k = 0;
				while (k < relNr) {			//  S†lenge ikke funnet s† mange kunder
					//   som ›nsker dette arrangementet:  
					++absNr;
					if ((antOnsket = kunder[absNr].antOnsket(i)) != 0)  ++k;
				}

				//  Dersom ikke de siste billettene som g†r/selges unna:
				if (antIgjen >= antOnsket) {
					//  Oppdaterer kundens mottatte billetter med ALLE de hun/han ›nsket seg:
					kunder[absNr].oppdaterBestiltFaatt(i, Kopier);
					//  Oppdaterer hvor mange som n† totalt er solgt p† arrangementet:
					arrangementer[i].oppdaterAntallSolgte(antOnsket);
				}
				else {        //  Det er de aller siste billettene som n† selges:
					//  Oppdaterer kundens mottatte billetter med de som er igjen:
					kunder[absNr].oppdaterBestiltFaatt(i, Faatt, antIgjen);
					//  Oppdaterer med at alt er n† utsolgt p† arrangementet:
					arrangementer[i].oppdaterAntallSolgte(antIgjen);
				}

			}
			arrangementer[i].skriv();
		}
		else {       //  Trenger IKKE å trekke:
			//  G†r gjennom ALLE kundene og gir de som 
			//    bestilte billetter det ›nskede antall:
			for (j = 1; j <= antKunder; j++)
				//  Dersom kunden har bestilt til dette arrangement:
				if ((antOnsket = kunder[j].antOnsket(i)) != 0) {
					//  Oppdaterer kundens mottatte billetter med ALLE de hun/han ›nsket seg:
					kunder[j].oppdaterBestiltFaatt(i, Kopier);
					//  Oppdaterer hvor mange som n† totalt er solgt p† arrangementet:
					arrangementer[i].oppdaterAntallSolgte(antOnsket);
				}
			arrangementer[i].skriv();
		}
}

int hentPris(int i) //henter prisen fra Arrangemnt klassen
{
	int temp;

	temp = arrangementer[i].hentPris();

	return temp;
}

//  Leser data om alle arrangementene BIN’RT fra filen "BIL_OLXX.RES":
void lesBilletterFraFil()  {
	int i = 0;
	ifstream innfil("bil_olxx.res", ios::binary);
	if (!innfil)
	{
		std::cout << "\n\nFant ikke fil\n\n";
	}
	else
	{
		do
		{
			innfil.read((char*)& arrangementer[i], sizeof(arrangementer));
		} while (!innfil.eof());
	}

}


//  leser data om alle kundene BIN’RT fra filen "KUN_OLXX.RES":
void lesKunderFraFil()  {
	int i = 0;
	ifstream innfil("kun_olxx.res", ios::binary);
	if (!innfil)
	{
		std::cout << "\n\nFant ikke fil\n\n";
	}
	else
	{
		do
		{
			innfil.read((char*)& kunder[i], sizeof(kunder));
		} while (!innfil.eof());
	}
}
