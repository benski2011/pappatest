#include <fstream>
#include <iostream>
#include <iomanip>
#include <cstring>
#include <cctype>
using namespace std;

const int STRLEN = 4.0;
const int MAXETAPPER = 10;
const int MAXTOPPER = 50;
const int MAXOPPOM = 10;

class Topp
{
private:
	char navn[STRLEN];
	int moh,
		hoyde;
	float lengde;

public:
	void skriv();
	void skriv_navn();
	void les_data(char nvm[]);
	bool heter(char nvn[]);
	void les_fra_fil(istream*inn);
};

class Etappe
{
private:
	char startsted[STRLEN];
	char sluttsted[STRLEN];
	float lengde;
	int ant_topper;
	int topper[MAXOPPOM + 1];

public:
	void skriv();
	void les_data();
	bool gaar_oppom(int n);
	bool start_slutt(char nvn[]);
	void les_fra_fill(ifstream& inn);
};

void skriv_meny();
char les(char t[]);
float les(const char t[], const int min, const int max);
void les(const char t[], char s[], const int LEN);
int finn_topp(char nvn[]);
void skriv_topper();
void skriv_etappe();
void ny_topp();
void ny_etappe();
void oppom();
void starter_slutter();
void les_fra_fil();

Topp toppene[MAXTOPPER + 1];
Etappe etappene[MAXETAPPER + 1];
int siste_topp;
int siste_etappe;

int main()
{
	char kommando;

	les_fra_fil();
	skriv_meny();
	kommando = les("Ønske");
	while (kommando != 'Q'){
		switch (kommando)
		{
		case 'P': skriv_topper(); break;
		case 'A': skriv_etappe(); break;
		case 'T':ny_topp(); break;
		case 'E': ny_etappe(); break;
		case 'O':oppom(); break;
		case 'S': starter_slutter(); break;
		default:skriv_meny();	break;
		}
		kommando = les("Ønske");
	}
	cout << "\n\n";
	return 0;
}

void Topp::skriv() 
{
	
		cout << navn[i] << '\n';
		cout << hoyde << '\n';
		cout << moh << '\n';
		cout << lengde << '\n';
	

}
void Topp::skriv_navn()
{
	cout << navn << "\n";

	for (int i = 1; i < STRLEN; i++)
	{
		cout << navn[i] << '\n';
		cout << moh << '\n';
		cout << lengde << '\n';
	}
}
void Topp::les_data(char nvn[])
{
	strcpy(navn, nvn);
	moh = les("meter over havet", 0, 8850);
	hoyde = les("meter over havet", 0, moh);
	lengde = les("lengde", 0, 1000);
}
bool Topp::heter(char nvn[])
{
	return (!strcmp(navn, nvn));
}
void Topp::les_fra_fil(istream*inn)
{
	cout << "test";

}
void Etappe::skriv()
{
	cout << startsted << "\n" << sluttsted << '\n' << lengde << "\n" << ant_topper << '\n';
	/*
	for (int i = 1; i < STRLEN; i++)
	{
		cout << startsted[STRLEN] << '\n';
		cout << sluttsted[STRLEN] << '\n';
		cout << lengde << '\n';
		cout << ant_topper << '\n',
		
	}
	*/
}
void Etappe::les_data()
{
	les("skriv started", startsted, STRLEN);
	les("skriv started", sluttsted, STRLEN);
	lengde = les("lengde", 0, 1000);
	ant_topper = les("antalltopper", 1, MAXOPPOM);
	for (int i = 1 i <= ant_topper; i++)
	{
		topper[i] = les("hvilken topp", 1, siste_topp);
	}
}
bool Etappe::gaar_oppom(int n)
{
	for (int i = 1; i <= ant_topper; i++)
	{
		if (topper[i] == n)
		{
			return true;
		}
	}
	return false;

}
bool Etappe::start_slutt(char nvn[])
{
	cout << "test";

}
void Etappe::les_fra_fill(ifstream& inn)
{
	ifstream topperFil("TOPPER.DTA");
	if (topperFil)
	{
		topperFil >> siste_topp;
		topperFil.ignore();
		for (int i = 1; i <= siste_topp; ++i)
		{
			toppene[i].les_fra_fil(topperFil);
		}
		char toppNavn[STRLEN];

	}
	else
	{
		cout << "filen eksiterer ikke";
	}
}

void skriv_meny()
{
	cout << "\n\nFØLGENDE KOMMANDOER ER LOVLIGE: \n";
	cout << "\tP=skriv alle topper\n";
	cout << "\tA=skriv en etappe \n";
	cout << "\tT=ny Topp\n";
	cout << "\tE=ny etappe+n";
	cout << "\tO=etapper som går oppom en gitt topp\n";
	cout << "\tS=etappe som starter elelr slutter et gitt sted/by\n";
	cout << "\tQ=avslutt";

}
char les(char t[])
{
	char ch;
	cout << '\n' << t << ":";
	cin >> ch; cin.ignore();
	return (toupper(ch));
}
float les(const char t[], const int min, const int max)
{
	float n;
do
{
cout << '\t' << t << " (" << min << '-' << max << "):";
cin >> n; cin.ignore();
} while (n<min || n>max);
return n;
}
void les(const char t[], char s[], const int LEN)
{
	do
	{
		cout << '\t' << t << ": ";
	} while (strlen(s) == 0);
}
int finn_topp(char nvn[])
{
	for (int i = 1; i <= siste_topp; i++)
		if (toppene[i].heter(nvn)) return i;
	return 0;
}
void skriv_topper()
{
	for (int i = 1; i < siste_topp; i++)
	{

		cout << i;
		toppene[i].skriv();
		if (i % 10 == 0)
		{
			les(" ");
		}
	}

}
void skriv_etappe();
{
	int nr = les("etappe?", 1, siste_etappe);
	etappene[nr].skriv();


	int etappenummer;
	cout << "tast inn etappenummer:" << endl;
	cin << etappenummer;
	while (etappenummer <= MAXETAPPER || siste_etappe)
	{
		for (int i; i <= MAXETAPPER; i++)
		{
			etappene[i].skriv();
		}
	}
}
void ny_topp()
{
	if (siste_topp >= MAXTOPPER)
	{
		cout << "\n\nFullt med tapper i datastrukturen!\n\n";
		return;
	}
	char TempNavn[STRLEN];
	les("skriv navn", TempNavn, STRLEN);

	if (finn_topp(TempNavn) == 0)
	{
		cout << "topp finnes ";
		return;
	}		toppene[++siste_topp].les_data();


}
void ny_etappe()
{
	if (siste_etappe < MAXETAPPER)
	{
		etappene[++siste_etappe].les_data();
	}
	else
		cout << "\n\nFullt med etapper i datastrukturen!\n\n";
}
void oppom()
{
	;
	les("skriv topp", topp_navn, STRLEN);
	int index = finnTopp(toppnavn);
	if (index != 0)
	{
		for (int i = 1; i <= siste_etappe; i++)
		{
			if (etappene[i].gaar_oppom(index))
			{
				cout << i << " ";
			}
		}
	}
	char toppnavn[STRLEN]
}
void starter_slutter()
{
	char by[STRLEN];
	les("hvilken by", by, STRLEN);
	for  (int i = 1; i <= siste_etappe; i++)
	{
		if ( etappene[i].start_slutt(by))
		{
			cout << i << "\n";
		}
	}
}
void les_fra_fil();
{
	inn.getline(navn, STRLEN);
	inn >> moh >> lengde >> hoyde;


}
