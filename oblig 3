
//  Fil:  FRODEH \ CPP \ OBIGER \ OBLIG_4.TPL
//
//  Skjellettet/template for obligatorisk oppgave nr.4 i  C++ -programmering.
//  Omhandler/"dekker" kap.2-6 i læreboka.

//husk å spørr på mandagen om hvordan parameter overføringen skjer i bool tid::likdato
//  INCLUDE:
#include <iostream>          //  cout, cin
#include <cctype>            //  toupper

using namespace std;

//  KLASSE:
class Tid {                  //  Klasse inneholdende data om:
private:
	int dag, maaned, aar;     //    - en gitt dato  og
	int time, minutt, sekund; //    - et gitt tidspunkt (klokkeslett).

	bool  skuddaar(int aa);                    //  Hentet/kopiert RETT
	int   dagnummer(int da, int ma, int aa);   //     fra OPPG_20.

public:
	Tid();                    //  2x constructorer:
	Tid(int t, int m, int s);
	void skrivDato();         //  På formen:  dd/mm-aaaa
	void skrivTidspunkt();    //  På formen:  tt:mm:ss
	void skrivTid();          //  På formen:  dd/mm-aaaa   tt:mm:ss
	void lesDato();           //  Leser inn ny dato.
	void lesTidspunkt();      //  Leser inn nytt tidspunkt.
	void lesTid();            //  Leser inn ny dato og nytt tidspunkt.
	bool likDato(const Tid t);              //  Er datoene like eller ei.
	Tid  tidspunktForskjell(const Tid tt);  //  Tiden mellom to tidspunkt samme dag.
	int  datoForskjell(const Tid tt);  //  Antall dager mellom to datoer.
};

//  DEKLARASJON AV FUNKSJONER:
void skrivMeny();
char lesKommando();
int  les(const int min, const int max);
void skrivDato(); 
void skrivTid();
void lesDato(); 
void lesTidspunkt();
void skrivTid();
void tidspunktForskjell();
void datoForskjell(); 
bool likDato(const Tid t);


//  ********************  H O V E D P R O G R A M M E T:  *******************
int main()  {
	Tid tid1, tid2, tid3;  //  Tre tid-objekter.
	char valg;             //  Brukerens valg/ønske/kommando.
	char valg2;
	int nr;                //  Hvilken av tid1 og tid2 det skal endres på.
	Tid(); 


	skrivMeny();           //  Skriver/viser bruker-menyen.
	valg = lesKommando();  //  Leser brukerens valg/ønske/kommando.

	while (valg != 'Q'  &&  valg != 'A')  {  //  Så lenge ikke avslutte:
		switch (valg)  {
		case 'S':  skrivTid();     break;

		case 'D':    cout << "skal det endres på 1) Tid1 eller 2) Tid2?\n";
			cin >> valg2; 
			valg2 = les(1, 2);
			if (valg2 == '1')
			{
				lesDato();		
			}
			if (valg2 == '2')
			{
				lesDato();
			}break;

		case 'P':    cout << "skal det endres på 1) Tid1 eller 2) Tid2?\n";
			cin >> valg2;
			valg2 = les(1, 2);   
			if (valg2 == '1')
			{
				lesTidspunkt();
			}
			if (valg2 == '2')
			{
				lesTidspunkt();
			}break;

		case 'T':    cout << "skal det endres på 1) Tid1 eller 2) Tid2?\n";
			cin >> valg2;
			valg2 = les(1, 2);		
			if (valg2 == '1')
			{
				skrivTid();
			}
			if (valg2 == '2')
			{
				skrivTid();
			}break;

		case 'X':   if (likDato(true))
			cout << "datone er like" << endl; 
					else

			
			break;


		case 'Y':    datoForskjell();   break;

		default:   skrivMeny();   break;
		}
		valg = lesKommando(); //  Leser igjen brukerens valg/ønske/kommando.
	}
	cout << "\n\n";
	return 0;
}


//  *******************  DEFINISJON AV KLASSE-FUNKSJONER:  ********************

//  IDENTISK TIL OPPG_20:
bool Tid::skuddaar(int aa)  {    //  Sjekker om et visst år er skuddår:
	if ((aa % 400 == 0) || ((aa % 4 == 0) && (aa % 100) != 0))
		return true;                  //  Skuddår dersom: (delelig med 400)
	else                             //    ELLER (delelig med 4 OG ikke med 100)
		return false;
}
//  IDENTISK TIL OPPG_20:
//  Ut fra datoens input, så returneres (om mulig)
//    denne datoens dagnummer i året, ellers returneres 0.
int Tid::dagnummer(int da, int ma, int aa)  {
	//  Setter opp antall dager i månedene.
	//   Verdien for februar settes senere.
	int dagerPrMaaned[12] = { 31, 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
	int totalDagnr, i;

	if (aa < 1600 || aa > 2100) return 0;    //  Ulovlig år.
	if (ma < 1 || ma > 12)   return 0;    //  Ulovlig måned.
	//  Ut fra om året er skuddår eller ei,
	//    så settes verdien for februar:
	dagerPrMaaned[1] = (skuddaar(aa)) ? 29 : 28;
	if (da < 1 || da > dagerPrMaaned[ma - 1])  return 0;  // Ulovlig dag:
	//  Garantert at er en lovlig dato !!
	totalDagnr = da;
	for (i = 0; i < ma - 1; i++)              // Regner ut datoens dagnummer.
		totalDagnr += dagerPrMaaned[i];

	return totalDagnr;                          // Returnerer dagnummeret.
}


Tid::Tid()                       //  2x constructorer, som setter verdier:
{
	dag = 1; maaned = 1; aar = 2000; time = 0; minutt = 0; sekund = 0;
	dag = 1; maaned = 1; aar = 2000; time = 0; minutt = 0; sekund = 0;

}

Tid::Tid(int t, int m, int s)
{
	dag = 1; maaned = 1; aar = 2000; t = time; m = minutt; s = sekund;
}

void Tid::skrivDato()            //  På formen:  dd/mm-aaaa
{
	dag = les(1, 31); maaned = les(1, 12); aar = les(1600, 2100);
}

void Tid::skrivTidspunkt()       //  På formen:  tt:mm:ss
{
	cout << time << ":" << minutt << ":" << sekund << endl;
	if (time < 10 )
	{
		cout << "0";
	}
	if (minutt < 10)
	{
		cout << "0";
	}
	if (sekund < 10)
	{
		cout << "0";
	}
}

void Tid::skrivTid()             //  På formen:  dd/mm-aaaa   tt:mm:ss
{
	cout << time << ":" << minutt << ":" << sekund << endl;
	cout << dag << "/" << maaned << "-" << aar << endl;
}

void Tid::lesDato()              //  Leser inn ny dato:
{
	int dagnr; 
	do
	{
		cout << dag << "/" << maaned << "-" << aar << endl;
		dag = les(1, 31); maaned = les(1, 12); aar = (1600, 2100);
		dagnr = dagnummer( dag, maaned, aar); 
	} while (dagnr == 0);
}

void Tid::lesTidspunkt()         //  Leser inn nytt tidspunkt:
{
	cout << time << ":" << minutt << ":" << sekund << endl;
	time = les(0, 23); minutt = les(0, 59); sekund = les(0, 59);
}

void Tid::lesTid()               //  Leser inn ny dato og nytt tidspunkt:
{
	cout << time << ":" << minutt << ":" << sekund << endl; 
	time = les(0, 23); minutt = les(0, 59); sekund = les(0, 59);
	dag = les(1, 31); maaned = les(1, 12); aar = (1600, 2100);


}

bool Tid::likDato(const Tid t)   //  Er to datoer like eller ei:
{
	
	{ return (aar == t.aar  &&  maaned == t.maaned && dag==t.dag); }
	//sjekker om datoen for tid1/2 er lik hverandre
}

Tid Tid::tidspunktForskjell(const Tid tt)  //  Forskjellen mellom to tidspunkt:
{
	if (tt.likDato = true)
	{return (time - tt.time && minutt - tt.minutt && sekund - tt.sekund);}

}

int Tid::datoForskjell(const Tid tt)    //  Antall dager mellom to datoer:
{  
	dagnummer
}



//  ***********************  DEFINISJON AV FUNKSJONER:  ***********************

void skrivMeny()  {         //  Skriver brukerens valg/muligheter/meny:
	cout << "\n\nFølgende kommandoer er aktuelle:\n";
	cout << "\tS   - Skriv begge tidene\n";
	cout << "\tD   - Dato-innlesning\n";
	cout << "\tP   - Tidspunkt-innlesning\n";
	cout << "\tT   - Tid-innlesning (= Dato + Tidspunkt)\n";
	cout << "\tX   - Tidspunkt-forskjell (når samme dato)\n";
	cout << "\tY   - Dato-forskjell\n";
	cout << "\tQ/A - Quit / Avslutt\n";
}


char lesKommando()  {       //  Leser brukerens valg/ønske/kommando:
	char ch;                   //  Innskrevet tegn.
	cout << "\n\nGi kommando (S, D, P, T, X, Y, Q/A):  ";  //  Ber om ett tegn.
	cin >> ch;    ch = toupper(ch);        //  Leser og upcaser tegn.
	return ch;                 //  Returnerer tegn/kommando.
}

//  Leser inn og returnerer verdi i [MIN, MAX]:
int les(const int min, const int max)  {
	int tall;                     //  Innskrevet tallverdi.
	cin >> tall;                  //  Leser tall.
	while (tall < min || tall > max)  {    //  Utenfor gyldig intervall:
		cout << "\ti intervallet (" << min << '-' << max << "):  ";
		cin >> tall;
	}
	return tall;                  //  Returnerer akseptert (gyldig) tall
}
