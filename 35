//Benjamin Skinstad 470918

#include <fstream>                     //  ifstream, ofstream
#include <iostream>                    //  cout
using namespace std;

//  konstanter
const int  ANTARR = 11;           //  antall arrangementer
const int  ANTKUNDER = 201;           //  antall kunder
const int  NVNLEN = 20;           // kunde navns lengde
const int  ARRLEN = 35;           //  arrengement navn lengde

//deklrasjon av funksjoner

void lesBilletterFraBinFil(); //funksjonen leser fra biletter bin fil
void lesKunderFraBinFil();    //funksjon leser fra binar fil til kunder
void WritetoASCII();          // skriver til ascii fila

//  KLASSER:
class Kunde
{         //klasse for kunde
private:
	char navn[NVNLEN];                 //   navn.
	int  antBestilt[ANTARR];           //  Antall bestilte per arrangement
	int  antFaatt[ANTARR];             //  Antall biletter han har fått per arrengement.

public:                              //funksjoner
	Kunde();
	void hentNavn(char nvn[NVNLEN]);
	void hentAntallFaatArr(int nr, int& ant);
	void hentAntallFaat(int& ant);
};


class Arrangement
{
private:
	char tittel[ARRLEN];               //  Arrangementets navn.
	int  pris;                         //  Pris ea
	int  antPlasser;                   //  Antall plassertotalt.
	int  antSolgt;                     //  Antall billetter solgt 
	int  totaltBilletterBestilt;       //  Totalt ønsket billetter.
	int  totaltKunderBestilt;          //  Antall kunder som ønsker billetter.

public:
	Arrangement();                     //funksjoner
	void hentNavn(char titt[ARRLEN]);
	void hentPris(int num, int& tot);
};

//  globale varriabler
Kunde        kunder[ANTKUNDER];        //  Alle kundene.
Arrangement  arrangementer[ANTARR];    //  Alle arrangementene.


//  int main:
int main()
{
	cout << "\n\n\tLeser data fra filene "   //les funksjon
		<< "'BIL_OLXX.RES' og 'KUN_OLXX.RES' .....\n\n";
	lesBilletterFraBinFil();                  //leser ffra biletter
	lesKunderFraBinFil();                     //leser fra kunder


	cout << "\n\n\tSkriver resultat til filene "
		<< "'faktura.txt' .....\n\n";
	WritetoASCII();
	return 0;                               //skriver til ascii 
}

//  DEFINISJON AV KLASSE-FUNKSJONER:
Kunde::Kunde()                         //nullstiller arrayers innhold.
{
	for (int i = 1; i < ANTARR; i++) i[antBestilt] = i[antFaatt] = 0;
}


void Kunde::hentNavn(char nvn[NVNLEN])  //henter kundens navn.
{
	for (int i = 0; i < NVNLEN; i++)
	{
		i[nvn] = i[navn];
	}
}

void Kunde::hentAntallFaatArr(int nr, int& ant)	//henter antall 
{
	ant = nr[antFaatt];
}

void Kunde::hentAntallFaat(int& ant) //henter antall
{
	int counter = 0;
	for (int i = 0; i < ANTARR; i++)
	{
		counter += i[antFaatt];
	}
	ant = counter;
}

Arrangement::Arrangement()		//nullstiller medlemmene
{
	pris = antPlasser = antSolgt =
		totaltBilletterBestilt = totaltKunderBestilt = 0;
}

//henter en del av medlemmene

void Arrangement::hentNavn(char titt[ARRLEN])
{
	for (size_t i = 0; i < ARRLEN; i++)
	{
		i[titt] = i[tittel];
	}
}

void Arrangement::hentPris(int num, int& tot) //henter pris
{
	tot = pris * num;
}




void WritetoASCII()
{
	char kunNavn[NVNLEN], arrNavn[ARRLEN];   //Kundens og arrangement navn.
	int  antArr, antBill;         //  Variabler
	int  number, totPris, pris;  //flere variabler
	ofstream utfil("faktura.txt");
	antArr = ANTARR;
	if (utfil) {
		for (number = 1; number < ANTKUNDER; number++)
		{					// for løkke som skriver inn all dataen for hver kunde.
			totPris = 0;	//resetter variablen
			pris = 0;		//resetter variablen
			antBill = 0;	//resetter variablen
			antArr = 0;		//resetter variablen
			kunder[number].hentNavn(kunNavn);				//henter kundens navn.
			utfil << "Kundens navn: " << kunNavn << '\n';   //Skriver kundens navn
			kunder[number].hentAntallFaat(antArr);			//henter antall biletter fått
			utfil << "Kundens billetter: " << antArr		//skriver ut "overssikt"
				<< "\t\t" << "Billeter" << '\t' << "Pris" << '\n';
			for (int i = 1; i < ANTARR; i++)
			{
				//  skriver arr.number og antall billetter.
				number[kunder].hentAntallFaatArr(i, antBill);
				if (antBill > 0)						          	//hvis antall biletter er
				{										                  	//større enn null så skrives
					arrangementer[i].hentNavn(arrNavn);		//bilettene ut til fil
					arrangementer[i].hentPris(antBill, pris);
					utfil << arrNavn;				        		//Billetene skrives ut med
					if (i % 2 == 0)					        		//antall biletter kjøpt
						utfil << '\t';				        		//og navn på arrangement
					utfil << '\t' << antBill << "\t\t" << pris << '\n';
					totPris += pris;			        			//her legges pris til totalpris
					pris = 0;						            		//deretter resettes pris!
				}
			}
			utfil << "Total pris (for alle bilettene): " << totPris << "\n\n\n";
		}	//i linjen over skrives den totale prisen ut for kunden.
	}
	else
		cout << "\nFinner ikke filen 'faktura.txt'" << endl;
}			//hvis filen ikke finnes og den ikke kan bli lagd skrives denne teksten ut.




//  definisjon av funksjoner

//  Leser innholdet av filen "KUN_OLXX.DTA".
//  Filformat:
//    Felt:  <navn>  (<arrNr>  <billetter fått>  <pris per arr>) * antrr med bill <total sum>

void lesBilletterFraBinFil() //leser fra bilett fila
{
	int i;
	ifstream innfil("bil_olxx.res", ios::binary);
	if (innfil)
	{
		for (i = 1; i < ANTARR; i++)
			innfil.read((char *)& i[arrangementer], sizeof(Arrangement));
	}
}

void lesKunderFraBinFil()  //leser fra kundenes binar fil 
{
	int i = 0;
	ifstream innfil("kun_olxx.res", ios::binary);
	if (!innfil)
	{
		cout << "fant ikke fil";
	}
	else
	{
		do
		{
			innfil.read((char*)& kunder[i], sizeof(kunder));
		} while (!innfil.eof());
	}
}
